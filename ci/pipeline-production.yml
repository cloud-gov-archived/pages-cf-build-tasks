---
#@ load("funcs.lib.yml", "slack_hook")
#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")

#!  JOBS

jobs:
  - name: set-pipeline
    plan:
      - get: src
        resource: src-((deploy-env))-tagged
        trigger: true
      - get: pipeline-tasks
      - get: general-task
      - task: init
        image: general-task
        file: pipeline-tasks/tasks/init.yml
        params:
          PIPELINE_YML: src/ci/pipeline-staging.yml
      - set_pipeline: cf-build-tasks
        file: compiled/set-pipeline.yml
        instance_vars:
          deploy-env: ((deploy-env))

  - name: deploy-((deploy-env))
    plan:
      - get: src
        resource: src-((deploy-env))-tagged
        trigger: true
        passed: [set-pipeline]
      - get: general-task
      - get: oci-build-task
      - get: python
      - task: common-test
        file: src/ci/partials/common-test.yml
        image: python
      - task: ls-tasks
        file: src/ci/partials/ls-tasks.yml
        image: general-task
      - load_var: build-tasks
        file: src/build-tasks.json
      - across:
          - var: build-task
            values: ((.:build-tasks))
            max_in_flight: 20
        do:
          - task: build
            privileged: true
            image: oci-build-task
            file: src/ci/partials/build.yml
            params:
              BUILD_ARG_TASK_FOLDER: tasks/((.:build-task))
              BUILD_ARGS_FILE: tasks/((.:build-task))/.env
              BUILDKIT_SECRETTEXT_UA_TOKEN: ((ua-token))
              DOCKERFILE: Dockerfile
          - task: tag-list
            file: src/ci/partials/tag-list.yml
            image: general-task
            params:
              TAG: ((.:build-task))-((deploy-env))
          - put: image-repository
            params:
              image: image/image.tar
              additional_tags: src/tag-list.txt
          - task: deploy
            file: src/ci/partials/deploy.yml
            image: general-task
            params:
              _: #@ template.replace(data.values.env_cf_build_tasks)
              CF_APP_NAME: pages-((.:build-task))-task-((deploy-env))
              CF_MANIFEST: .cloudgov/manifest.yml
              CF_VARS_FILE: .cloudgov/vars/pages-((deploy-env)).yml
              IMAGE_REPOSITORY: ../image-repository/repository
              IMAGE_TAG: ((.:build-task))-((deploy-env))
              CF_DOCKER_USERNAME: ((ecr-aws-key))
              CF_DOCKER_PASSWORD: ((ecr-aws-secret))
            on_failure: #@ slack_hook("failure", "((.:build-task)) deployment")
            on_success: #@ slack_hook("success", "((.:build-task)) deployment")

  - name: release
    plan:
      - get: src
        resource: src-((deploy-env))-tagged
        params: { depth: 1 }
        trigger: true
        passed: [deploy-((deploy-env))]
      -  #@ template.replace(data.values.release_steps)

#!  RESOURCES

resources:
  - name: src-((deploy-env))-tagged
    type: git
    icon: github
    source:
      uri: https://github.com/cloud-gov/pages-cf-build-tasks.git
      branch: main
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))
      tag_filter: 0.*.*
      fetch_tags: true

  - name: image-repository
    type: registry-image
    source:
      aws_access_key_id: ((ecr-aws-key))
      aws_secret_access_key: ((ecr-aws-secret))
      repository: pages-cf-build-tasks
      aws_region: us-gov-west-1
      tag_regex: "*-((deploy-env))"

  - name: pages-release
    type: github-release
    source:
      owner: cloud-gov
      repository: pages-cf-build-tasks
      access_token: ((gh-access-token))

  - name: slack
  - name: pipeline-tasks
  - name: general-task
  - name: python
  - name: oci-build-task

#!  RESOURCE TYPES

resource_types:
  - name: slack-notification
  - name: git
  - name: registry-image
  - name: github-release
