---
#@ load("funcs.lib.yml", "slack_hook", "pr_hook")
#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")

#@ env = data.values.env

#!  JOBS

jobs:
  - name: set-pipeline
    plan:
      - get: src
        trigger: true
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
      - get: pipeline-tasks
      - get: general-task
      - task: boot
        image: general-task
        file: pipeline-tasks/tasks/boot.yml
        params:
          ENV_OVERRIDE: ((deploy-env))
      - set_pipeline: cf-build-tasks
        file: compiled/set-pipeline.yml
        instance_vars:
          deploy-env: ((deploy-env))

  #@ if/end env == 'staging':
  - name: update-release-branch
    plan:
      - get: src
        trigger: true
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
      - get: general-task
      - get: pipeline-tasks
      - task: update-release-branch
        image: general-task
        file: pipeline-tasks/tasks/update-release-branch.yml

  - name: test
    plan:
      - get: src
        trigger: true
        passed: [set-pipeline]
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
      #@ if/end env == 'dev':
      -  #@ pr_hook("pending", "test-cf-build-tasks")
      - get: python
      - task: common-test
        file: src/ci/partials/common-test.yml
        image: python
        #@ if env == 'dev':
        on_success: #@ pr_hook("success", "test-cf-build-tasks")
        on_failure: #@ pr_hook("failure", "test-cf-build-tasks")
        #@ end

  - name: deploy
    plan:
      - get: src
        trigger: true
        passed: [set-pipeline]
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
      #@ if/end env == 'dev':
      -  #@ pr_hook("pending", "deploy-cf-build-tasks")
      - get: general-task
      - get: oci-build-task
      - task: ls-tasks
        file: src/ci/partials/ls-tasks.yml
        image: general-task
      - load_var: build-tasks
        file: src/build-tasks.json
      - across:
          - var: build-task
            values: ((.:build-tasks))
            max_in_flight: 20
        do:
          - task: build
            privileged: true
            image: oci-build-task
            file: src/ci/partials/build.yml
            params:
              BUILD_ARG_TASK_FOLDER: tasks/((.:build-task))
              BUILD_ARGS_FILE: tasks/((.:build-task))/.env
              BUILDKIT_SECRETTEXT_UA_TOKEN: ((ua-token))
              DOCKERFILE: Dockerfile
          - task: tag-list
            file: src/ci/partials/tag-list.yml
            image: general-task
            params:
              TAG: ((.:build-task))-((deploy-env))
          - put: image-repository
            params:
              image: image/image.tar
              additional_tags: src/tag-list.txt
            get_params:
              skip_download: true
          - task: deploy
            file: src/ci/partials/deploy.yml
            image: general-task
            params:
              _: #@ template.replace(data.values.env_cf_build_tasks)
              CF_APP_NAME: pages-((.:build-task))-task-((deploy-env))
              CF_MANIFEST: .cloudgov/manifest.yml
              CF_VARS_FILE: .cloudgov/vars/pages-((deploy-env)).yml
              IMAGE_REPOSITORY: ../image-repository/repository
              IMAGE_TAG: ((.:build-task))-((deploy-env))
              CF_DOCKER_USERNAME: ((ecr-aws-key))
              CF_DOCKER_PASSWORD: ((ecr-aws-secret))
            on_failure: #@ slack_hook("failure", "((.:build-task)) deployment")
            on_success: #@ slack_hook("success", "((.:build-task)) deployment")
        #@ if env == 'dev':
        on_success: #@ pr_hook("success", "deploy-cf-build-tasks")
        on_failure: #@ pr_hook("failure", "deploy-cf-build-tasks")
        #@ end

    #@ if/end env == 'production':
  - name: release
    plan:
      - get: src
        params:
          #@ if/end env != 'dev':
          depth: 1
          #@ if/end env == 'dev':
          integration_tool: checkout
        trigger: true
        passed: [deploy]
      -  #@ template.replace(data.values.release_steps)

#!  RESOURCES

resources:
  #@ if/end env == 'dev':
  - name: src
    type: pull-request
    check_every: 1m
    source:
      repository: cloud-gov/pages-cf-build-tasks
      access_token: ((gh-access-token))
      base_branch: main
      disable_forks: true
      ignore_drafts: false

  #@ if/end env == 'staging':
  - name: src
    type: git
    icon: github
    source:
      uri: git@github.com:cloud-gov/pages-cf-build-tasks.git
      branch: main
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))
      private_key: ((pages-gpg-operations-github-sshkey.private_key))

  #@ if env == 'production':
  - name: src
    type: git
    icon: github
    source:
      uri: https://github.com/cloud-gov/pages-cf-build-tasks.git
      branch: main
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))
      tag_filter: 0.*.*
      fetch_tags: true

  - name: pages-release
    type: github-release
    source:
      owner: cloud-gov
      repository: pages-cf-build-tasks
      access_token: ((gh-access-token))
  #@ end

  - name: image-repository
    type: registry-image
    source:
      aws_access_key_id: ((ecr-aws-key))
      aws_secret_access_key: ((ecr-aws-secret))
      repository: pages-cf-build-tasks
      aws_region: us-gov-west-1
      tag_regex: "*-((deploy-env))"

  - name: slack
  - name: general-task
  - name: pipeline-tasks
  - name: python
  - name: oci-build-task

#! RESOURCE TYPES

resource_types:
  - name: slack-notification
  - name: registry-image
  - name: git
  #@ if/end env == 'dev':
  - name: pull-request
  #@ if/end env == 'production':
  - name: github-release
